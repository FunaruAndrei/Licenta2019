// <auto-generated />
using System;
using Domain.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.EF.Migrations
{
    [DbContext(typeof(EServiceDbContext))]
    [Migration("20190626182407_AdaugareAppointment_Part3")]
    partial class AdaugareAppointment_Part3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.EF.Models.Identity.EServiceRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Domain.EF.Models.Identity.EServiceUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Models.Client.ServiceLocationAppointment", b =>
                {
                    b.Property<int>("ServiceLocationAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentTime");

                    b.Property<int>("CarManufacturerId");

                    b.Property<string>("CarModel");

                    b.Property<int>("CarYear");

                    b.Property<int>("EServiceUserId");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<int>("ServiceLocationId");

                    b.Property<int>("ServiceLocationOperationId");

                    b.Property<int?>("ServiceLocationOperationId1");

                    b.Property<int?>("ServiceLocationOperationServiceLocationId");

                    b.Property<int?>("ServiceLocationOperationServiceOperationId");

                    b.HasKey("ServiceLocationAppointmentId");

                    b.HasIndex("CarManufacturerId");

                    b.HasIndex("ServiceLocationId");

                    b.HasIndex("ServiceLocationOperationId1", "ServiceLocationOperationServiceLocationId", "ServiceLocationOperationServiceOperationId");

                    b.ToTable("ServiceLocationAppointments");
                });

            modelBuilder.Entity("Domain.Models.Nomenclatoare.CarManufacturer", b =>
                {
                    b.Property<int>("CarManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.HasKey("CarManufacturerId");

                    b.ToTable("CarManufacturers");
                });

            modelBuilder.Entity("Domain.Models.Nomenclatoare.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Judet");

                    b.Property<string>("JudetAuto");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<string>("Name");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Models.Nomenclatoare.ContactType", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ContactTypeId");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("Domain.Models.Nomenclatoare.ServiceFacility", b =>
                {
                    b.Property<int>("ServiceFacilityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.HasKey("ServiceFacilityId");

                    b.ToTable("ServiceFacilities");
                });

            modelBuilder.Entity("Domain.Models.Nomenclatoare.ServiceOperation", b =>
                {
                    b.Property<int>("ServiceOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ServiceOperationTypeId");

                    b.HasKey("ServiceOperationId");

                    b.HasIndex("ServiceOperationTypeId");

                    b.ToTable("ServiceOperations");
                });

            modelBuilder.Entity("Domain.Models.Nomenclatoare.ServiceOperationType", b =>
                {
                    b.Property<int>("ServiceOperationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ServiceOperationTypeId");

                    b.ToTable("ServiceOperationTypes");
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceInfo", b =>
                {
                    b.Property<int>("ServiceInfoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdresaSediuSocial");

                    b.Property<string>("Descriere");

                    b.Property<string>("EmailDelegat");

                    b.Property<string>("Logo");

                    b.Property<string>("Nume")
                        .IsRequired();

                    b.Property<string>("NumeDelegat")
                        .IsRequired();

                    b.Property<string>("TelefonDelegat")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("ServiceInfoId");

                    b.ToTable("ServiceInfos");
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocation", b =>
                {
                    b.Property<int>("ServiceLocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("CityId");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<int>("MaxCars");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ServiceInfoId");

                    b.HasKey("ServiceLocationId");

                    b.HasIndex("CityId");

                    b.HasIndex("ServiceInfoId");

                    b.ToTable("ServiceLocations");
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocationContact", b =>
                {
                    b.Property<int>("ServiceLocationContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServiceLocationId");

                    b.Property<int>("ContactTypeId");

                    b.Property<string>("Value");

                    b.HasKey("ServiceLocationContactId", "ServiceLocationId", "ContactTypeId");

                    b.HasAlternateKey("ServiceLocationContactId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("ServiceLocationId");

                    b.ToTable("ServiceLocationContacts");
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocationFacility", b =>
                {
                    b.Property<int>("ServiceLocationFacilityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServiceLocationId");

                    b.Property<int>("ServiceFacilityId");

                    b.HasKey("ServiceLocationFacilityId", "ServiceLocationId", "ServiceFacilityId");

                    b.HasAlternateKey("ServiceLocationFacilityId");

                    b.HasIndex("ServiceFacilityId");

                    b.HasIndex("ServiceLocationId");

                    b.ToTable("ServiceLocationFacilities");
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocationOperation", b =>
                {
                    b.Property<int>("ServiceLocationOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServiceLocationId");

                    b.Property<int>("ServiceOperationId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<int>("Time");

                    b.HasKey("ServiceLocationOperationId", "ServiceLocationId", "ServiceOperationId");

                    b.HasAlternateKey("ServiceLocationOperationId");

                    b.HasIndex("ServiceLocationId");

                    b.HasIndex("ServiceOperationId");

                    b.ToTable("ServiceLocationOperations");
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocationPhoto", b =>
                {
                    b.Property<int>("ServiceLocationPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link");

                    b.Property<int>("Position");

                    b.Property<int>("ServiceLocationId");

                    b.HasKey("ServiceLocationPhotoId");

                    b.HasIndex("ServiceLocationId");

                    b.ToTable("ServiceLocationPhotos");
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocationReview", b =>
                {
                    b.Property<int>("ServiceLocationReviewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<float>("Rate");

                    b.Property<string>("Review");

                    b.Property<int>("ServiceLocationId");

                    b.Property<int>("UserEServiceId");

                    b.HasKey("ServiceLocationReviewId");

                    b.HasIndex("ServiceLocationId");

                    b.ToTable("ServiceLocationReviews");
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceManufacturer", b =>
                {
                    b.Property<int>("ServiceManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServiceLocationId");

                    b.Property<int>("CarManufacturerId");

                    b.HasKey("ServiceManufacturerId", "ServiceLocationId", "CarManufacturerId");

                    b.HasAlternateKey("ServiceManufacturerId");

                    b.HasIndex("CarManufacturerId");

                    b.HasIndex("ServiceLocationId");

                    b.ToTable("ServiceManufacturers");
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceProgram", b =>
                {
                    b.Property<int>("ServiceProgramId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CloseHour");

                    b.Property<int>("CloseMinute");

                    b.Property<int>("OpenHour");

                    b.Property<int>("OpenMinute");

                    b.Property<int>("ServiceLocationId");

                    b.Property<int>("WeekDay");

                    b.HasKey("ServiceProgramId");

                    b.HasIndex("ServiceLocationId");

                    b.ToTable("ServicePrograms");
                });

            modelBuilder.Entity("Domain.Models.Services.ServicePromotion", b =>
                {
                    b.Property<int>("ServicePromotionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<int>("ServiceLocationId");

                    b.HasKey("ServicePromotionId");

                    b.HasIndex("ServiceLocationId");

                    b.ToTable("ServicePromotions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Models.Client.ServiceLocationAppointment", b =>
                {
                    b.HasOne("Domain.Models.Nomenclatoare.CarManufacturer", "CarManufacturer")
                        .WithMany("ServiceLocationAppointments")
                        .HasForeignKey("CarManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Services.ServiceLocation", "ServiceLocation")
                        .WithMany()
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Services.ServiceLocationOperation", "ServiceLocationOperation")
                        .WithMany("ServiceLocationAppointments")
                        .HasForeignKey("ServiceLocationOperationId1", "ServiceLocationOperationServiceLocationId", "ServiceLocationOperationServiceOperationId");
                });

            modelBuilder.Entity("Domain.Models.Nomenclatoare.ServiceOperation", b =>
                {
                    b.HasOne("Domain.Models.Nomenclatoare.ServiceOperationType", "ServiceOperationType")
                        .WithMany("ServiceOperations")
                        .HasForeignKey("ServiceOperationTypeId");
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocation", b =>
                {
                    b.HasOne("Domain.Models.Nomenclatoare.City", "City")
                        .WithMany("ServiceLocations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Services.ServiceInfo", "ServiceInfo")
                        .WithMany("ServiceLocations")
                        .HasForeignKey("ServiceInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocationContact", b =>
                {
                    b.HasOne("Domain.Models.Nomenclatoare.ContactType", "ContactType")
                        .WithMany("ServiceLocationContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Services.ServiceLocation", "ServiceLocation")
                        .WithMany("ServiceLocationContacts")
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocationFacility", b =>
                {
                    b.HasOne("Domain.Models.Nomenclatoare.ServiceFacility", "ServiceFacility")
                        .WithMany("ServiceLocationFacilities")
                        .HasForeignKey("ServiceFacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Services.ServiceLocation", "ServiceLocation")
                        .WithMany("ServiceLocationFacilities")
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocationOperation", b =>
                {
                    b.HasOne("Domain.Models.Services.ServiceLocation", "ServiceLocation")
                        .WithMany("ServiceLocationOperations")
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Nomenclatoare.ServiceOperation", "ServiceOperation")
                        .WithMany("ServiceLocationOperations")
                        .HasForeignKey("ServiceOperationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocationPhoto", b =>
                {
                    b.HasOne("Domain.Models.Services.ServiceLocation", "ServiceLocation")
                        .WithMany("ServiceLocationPhotos")
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceLocationReview", b =>
                {
                    b.HasOne("Domain.Models.Services.ServiceLocation", "ServiceLocation")
                        .WithMany("ServiceLocationReviews")
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceManufacturer", b =>
                {
                    b.HasOne("Domain.Models.Nomenclatoare.CarManufacturer", "CarManufacturer")
                        .WithMany("ServiceManufacturers")
                        .HasForeignKey("CarManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Services.ServiceLocation", "ServiceLocation")
                        .WithMany("ServiceManufacturers")
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Services.ServiceProgram", b =>
                {
                    b.HasOne("Domain.Models.Services.ServiceLocation", "ServiceLocation")
                        .WithMany("ServicePrograms")
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Services.ServicePromotion", b =>
                {
                    b.HasOne("Domain.Models.Services.ServiceLocation", "ServiceLocation")
                        .WithMany("ServicePromotions")
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.EF.Models.Identity.EServiceRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.EF.Models.Identity.EServiceUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.EF.Models.Identity.EServiceUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.EF.Models.Identity.EServiceRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.EF.Models.Identity.EServiceUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.EF.Models.Identity.EServiceUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
